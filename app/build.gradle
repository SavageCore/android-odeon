/*
 * Copyright 2018 Thibault Seisel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId 'fr.nihilus.music'
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.appVersionCode
        versionName rootProject.appVersionName
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    // Retrieve keystore properties from this machine's global Gradle properties.
    signingConfigs {
        release {
            keyAlias propOrDefault('android.signing.keyAlias', '')
            keyPassword propOrDefault('android.signing.keyPassword', '')
            storeFile file(propOrDefault('android.signing.storeFile', 'signing/release.jks'))
            storePassword propOrDefault('android.signing.storePassword', '')
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += ['-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi']
    }

    testOptions {
        unitTests.includeAndroidResources = true
    }

    packagingOptions {
        // Exclude AndroidX version files
        exclude 'META-INF/*.version'
        // Exclude consumer proguard files
        exclude 'META-INF/proguard/*'
        // Exclude the random properties files
        exclude '/*.properties'
        exclude 'META-INF/*.properties'
    }

    buildTypes {
        // Allow installing a debug version of the application along a production one
        debug {
            versionNameSuffix '-dev'
            applicationIdSuffix '.debug'
        }

        release {
            signingConfig signingConfigs.release
            shrinkResources true
            minifyEnabled true
            proguardFiles(
                    getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
            )

            // Configure Kotlin compiler optimisations for releases
            kotlinOptions {
                freeCompilerArgs += [
                        '-Xno-param-assertions',
                        '-Xno-call-assertions',
                        '-Xno-receiver-assertions'
                ]
            }
        }
    }
}

androidExtensions {
    experimental = true
}

kapt {
    arguments {
        arg('dagger.formatGeneratedSource', 'disabled')
        arg('dagger.fastInit', 'enabled')
    }
}

dependencies {
    // Sub-project containing the Media Service.
    api project(':media')

    // Kotlin language support
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.koroutines}"

    // Support library dependencies
    implementation "androidx.appcompat:appcompat:${versions.androidx.appcompat}"
    implementation "androidx.fragment:fragment-ktx:${versions.androidx.fragment}"
    implementation "androidx.cardview:cardview:${versions.androidx.cardview}"
    implementation "androidx.recyclerview:recyclerview:${versions.androidx.recyclerview}"
    implementation "androidx.recyclerview:recyclerview-selection:${versions.androidx.recyclerview}"
    implementation "androidx.palette:palette-ktx:${versions.androidx.palette}"
    implementation "androidx.preference:preference-ktx:${versions.androidx.preference}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.androidx.constraint_layout}"

    implementation "androidx.navigation:navigation-fragment-ktx:${versions.androidx.navigation}"
    implementation "androidx.navigation:navigation-ui-ktx:${versions.androidx.navigation}"

    // Material Components
    implementation "com.google.android.material:material:${versions.material}"

    // Android Arch Components
    implementation "androidx.lifecycle:lifecycle-extensions:${versions.androidx.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-common-java8:${versions.androidx.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.androidx.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${versions.androidx.lifecycle}"

    // Glide
    implementation "com.github.bumptech.glide:glide:${versions.glide}"
    kapt "com.github.bumptech.glide:compiler:${versions.glide}"

    // My libraries
    implementation "com.github.thibseisel:ratioimageview:${versions.ratioimageview}"

    // Dagger
    implementation "com.google.dagger:dagger:${versions.dagger}"
    implementation "com.google.dagger:dagger-android:${versions.dagger}"
    implementation "com.google.dagger:dagger-android-support:${versions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${versions.dagger}"

    // ReactiveX
    implementation "io.reactivex.rxjava2:rxjava:${versions.rxjava}"
    implementation "io.reactivex.rxjava2:rxandroid:${versions.rxandroid}"

    // Timber Logging
    implementation "com.jakewharton.timber:timber:${versions.timber}"

    // Test dependencies
    testImplementation "androidx.test:rules:${versions.androidx.test_rules}"
    testImplementation "androidx.test:runner:${versions.androidx.test_runner}"
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "androidx.test.ext:junit-ktx:${versions.androidx.ext_junit}"
    testImplementation "androidx.test.ext:truth:${versions.androidx.ext_truth}"
    testImplementation "com.google.truth:truth:${versions.truth}"
    testImplementation "org.robolectric:robolectric:${versions.robolectric}"
    testImplementation "androidx.arch.core:core-testing:${versions.androidx.lifecycle}"

    androidTestImplementation "androidx.test:core:${versions.androidx.test_core}"
    androidTestImplementation "androidx.test:rules:${versions.androidx.test_rules}"
    androidTestImplementation "androidx.test:runner:${versions.androidx.test_runner}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.androidx.espresso}"
    androidTestImplementation "org.mockito:mockito-android:${versions.mockito}"
}