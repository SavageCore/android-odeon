/*
 * Copyright 2018 Thibault Seisel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId 'fr.nihilus.music'
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.appVersionCode
        versionName rootProject.appVersionName
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    // Retrieve keystore properties from this machine's global Gradle properties.
    signingConfigs {
        release {
            keyAlias propOrDefault('android.signing.keyAlias', '')
            keyPassword propOrDefault('android.signing.keyPassword', '')
            storeFile file(propOrDefault('android.signing.storeFile', 'signing/release.jks'))
            storePassword propOrDefault('android.signing.storePassword', '')
        }
    }

    packagingOptions {
        // Exclude AndroidX version files
        exclude 'META-INF/*.version'
        // Exclude consumer proguard files
        exclude 'META-INF/proguard/*'
        // Exclude the random properties files
        exclude '/*.properties'
        exclude 'META-INF/*.properties'

        // Fix weird packaging bugs due to including Ktor
        pickFirst 'META-INF/*.kotlin_module'
    }

    buildTypes {
        // Allow installing a debug version of the application along a production one
        debug {
            versionNameSuffix '-dev'
            applicationIdSuffix '.debug'
        }

        release {
            signingConfig signingConfigs.release
            shrinkResources true
            minifyEnabled true
            proguardFiles(
                    getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
            )

            // Configure Kotlin compiler optimisations for releases
            kotlinOptions {
                freeCompilerArgs += [
                        '-Xno-param-assertions',
                        '-Xno-call-assertions',
                        '-Xno-receiver-assertions'
                ]
            }
        }

        /* Beta are built quite the same as releases, but differ by the following:
         * - when installed on a device, it will not overwrite the release app.
         * - it is obfuscated but still debuggable.
         * - APKs are not required to be signed.
         *
         * The main intent is to test the app in debug mode but with its code obfuscated
         * since it could fail unexpectedly.
         */
        beta {
            initWith buildTypes.debug

            versionNameSuffix = '-beta'
            applicationIdSuffix = '.debug'

            // Unlike release builds, keep the app debuggable.
            shrinkResources true
            minifyEnabled true
            proguardFiles = buildTypes.release.proguardFiles + 'beta-rules.pro'

            // Tell dependent modules to be compiled with their debug variant.
            matchingFallbacks = ['debug']
        }
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    // Sub-project containing the Media Service.
    implementation project(':core')
    implementation project(':core-ui')
    implementation project(':media')
    implementation project(':service')
    implementation project(':spotify-client')
    implementation project(':devmenu')

    // Support library dependencies
    implementation "androidx.cardview:cardview:${versions.androidx.cardview}"
    implementation "androidx.recyclerview:recyclerview:${versions.androidx.recyclerview}"
    implementation "androidx.recyclerview:recyclerview-selection:${versions.androidx.rvSelection}"
    implementation "androidx.viewpager2:viewpager2:${versions.androidx.viewpager2}"
    implementation "androidx.palette:palette-ktx:${versions.androidx.palette}"
    implementation "androidx.preference:preference-ktx:${versions.androidx.preference}"

    // Glide
    implementation "com.github.bumptech.glide:glide:${versions.glide}"
    kapt "com.github.bumptech.glide:compiler:${versions.glide}"

    // My libraries
    implementation "com.github.thibseisel:ratioimageview:${versions.ratioimageview}"

    // Dagger
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${versions.dagger}"

    // Test dependencies
    testImplementation project(':core-test')
    testImplementation "androidx.test:rules:${versions.androidx.test}"
    testImplementation "androidx.test.ext:junit-ktx:${versions.androidx.ext_junit}"
    testImplementation "androidx.test.ext:truth:${versions.androidx.ext_truth}"
    testImplementation "com.google.truth:truth:${versions.truth}"
    testImplementation "org.robolectric:robolectric:${versions.robolectric}"

    androidTestImplementation "androidx.test:core:${versions.androidx.test}"
    androidTestImplementation "androidx.test:rules:${versions.androidx.test}"
    androidTestImplementation "androidx.test:runner:${versions.androidx.test}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.androidx.espresso}"
}