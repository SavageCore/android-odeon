/*
 * Copyright 2018 Thibault Seisel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId "fr.nihilus.music"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1002
        versionName '1.0.2'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ['room.schemaLocation': "$projectDir/schemas".toString()]
            }
        }
    }

    // Retrieve keystore properties from this machine's global Gradle properties.
    if (project.hasProperty('android.signing.keyAlias')
        && project.hasProperty('android.signing.keyPassword')
        && project.hasProperty('android.signing.storeFile')
        && project.hasProperty('android.signing.storePassword')) {

        signingConfigs {
            config {
                keyAlias project.property('android.signing.keyAlias')
                keyPassword project.property('android.signing.keyPassword')
                storeFile file(project.property('android.signing.storeFile'))
                storePassword project.property('android.signing.storePassword')
            }
        }
    } else {
        project.logger.warn('''
            This machine does not define a signing configuration, 
            and therefore cannot build releases. You have to define the following properties:
            * android.signing.keyAlias
            * android.signing.keyPassword
            * android.signing.storeFile
            * android.signing.storePassword
            in the local ~.gradle/gradle.properties file of your machine.
            '''.stripIndent())
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // Configure Kotlin compiler optimisations for releases
            kotlinOptions {
                freeCompilerArgs = [
                        'Xno-param-assertions',
                        'Xno-call-assertions',
                        'Xno-receiver-assertions'
                ]
            }
        }

        // Allow installing a debug version of the application along a production one
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
            debuggable true
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7'
    implementation "androidx.core:core-ktx:$ktxVersion"

    // Support library dependencies
    implementation supportLibrary('support-v4')
    implementation supportLibrary('appcompat-v7')
    implementation supportLibrary('cardview-v7')
    implementation supportLibrary('recyclerview-v7')
    implementation supportLibrary('palette-v7')
    implementation supportLibrary('design')
    implementation supportLibrary('preference-v7')
    implementation supportLibrary('preference-v14')
    implementation "com.android.support.constraint:constraint-layout:${constraintVersion}"

    // Android Arch Components
    implementation "android.arch.lifecycle:extensions:${archVersion}"
    implementation "android.arch.persistence.room:runtime:${roomVersion}"
    implementation "android.arch.persistence.room:rxjava2:${roomVersion}"
    kapt "android.arch.lifecycle:compiler:${archVersion}"
    kapt "android.arch.persistence.room:compiler:${roomVersion}"

    // Glide
    implementation "com.github.bumptech.glide:glide:${glideVersion}"
    kapt "com.github.bumptech.glide:compiler:${glideVersion}"

    // My libraries
    implementation "fr.nihilus:recyclerfragment:${recyclerVersion}"
    implementation "com.github.thibseisel:kdenticon-android:${kdenticonVersion}"
    implementation 'com.github.thibseisel:ratioimageview:1.0.0'

    // ExoPlayer
    implementation "com.google.android.exoplayer:exoplayer-core:${exoplayerVersion}"
    implementation "com.google.android.exoplayer:extension-mediasession:${exoplayerVersion}"

    // Dagger
    implementation "com.google.dagger:dagger:${daggerVersion}"
    implementation "com.google.dagger:dagger-android:${daggerVersion}"
    implementation "com.google.dagger:dagger-android-support:${daggerVersion}"
    kapt "com.google.dagger:dagger-compiler:${daggerVersion}"
    kapt "com.google.dagger:dagger-android-processor:${daggerVersion}"

    // ReactiveX
    implementation "io.reactivex.rxjava2:rxjava:${rxJavaVersion}"
    implementation "io.reactivex.rxjava2:rxandroid:${rxAndroidVersion}"

    // Timber Logging
    implementation "com.jakewharton.timber:timber:${timberVersion}"

    // Test dependencies
    testImplementation "org.hamcrest:hamcrest-all:${hamcrestVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.robolectric:robolectric:${robolectricVersion}"
    testImplementation "com.google.truth:truth:${truthVersion}"

    androidTestImplementation "com.android.support:support-annotations:${supportLibVersion}"
    androidTestImplementation "com.android.support.test:rules:${androidTestVersion}"
    androidTestImplementation "com.android.support.test:runner:${androidTestVersion}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${espressoVersion}"
    androidTestImplementation "org.mockito:mockito-android:${mockitoVersion}"
}

/**
 * Helper function that builds the Maven coordinates for Android support libraries,
 * for a more compact and readable dependency declaration.
 */
String supportLibrary(String artifact) {
    return "com.android.support:$artifact:$supportLibVersion"
}