/*
 * Copyright 2019 Thibault Seisel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.appVersionCode
        versionName rootProject.ext.appVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        debug {
            buildConfigField 'String', 'APP_PROVIDER_AUTHORITY', '"fr.nihilus.music.debug.provider"'
            manifestPlaceholders.providerAuthority = 'fr.nihilus.music.debug.provider'
        }

        release {
            // Configure Kotlin compiler optimisations for releases
            kotlinOptions {
                freeCompilerArgs += [
                        '-Xno-param-assertions',
                        '-Xno-call-assertions',
                        '-Xno-receiver-assertions'
                ]
            }

            buildConfigField 'String', 'APP_PROVIDER_AUTHORITY', '"fr.nihilus.music.provider"'
            manifestPlaceholders.providerAuthority = 'fr.nihilus.music.provider'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
        freeCompilerArgs += ['-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi']
    }

    testOptions {
        // Include Android resources in unit tests to be resolved by Robolectric.
        unitTests.includeAndroidResources = true
    }
}

dependencies {
    implementation project(':core')

    // Kotlin language support
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:${versions.koroutines}"

    // Android support libraries
    implementation "androidx.appcompat:appcompat:${versions.androidx.appcompat}"
    implementation "androidx.media:media:${versions.androidx.media}"

    // Dagger
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"

    // Other libraries
    implementation "com.github.thibseisel:kdenticon-android:${versions.kdenticon}"

    // Test dependencies
    testImplementation project(':core-test')
    testImplementation "org.robolectric:robolectric:${versions.robolectric}"
    testImplementation "com.google.truth:truth:${versions.truth}"
    testImplementation "androidx.test.ext:junit-ktx:${versions.androidx.ext_junit}"
    testImplementation "androidx.test.ext:truth:${versions.androidx.ext_truth}"
    testImplementation "androidx.room:room-ktx:${versions.androidx.room}"
    kaptTest "com.google.dagger:dagger-compiler:${versions.dagger}"
}
