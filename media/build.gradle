/*
 * Copyright 2018 Thibault Seisel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.appVersionCode
        versionName rootProject.appVersionName
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles 'proguard-rules.pro', rootProjectFile('coroutines.pro')

            // Configure Kotlin compiler optimisations for releases
            kotlinOptions {
                freeCompilerArgs = [
                        '-Xno-param-assertions',
                        '-Xno-call-assertions',
                        '-Xno-receiver-assertions'
                ]
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.includeAndroidResources = true
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas")
    }
}

kapt {
    arguments {
        arg('room.schemaLocation', "$projectDir/schemas".toString())
        arg('dagger.formatGeneratedSource', 'disabled')
        arg('dagger.fastInit', 'enabled')
    }
}

dependencies {
    // Kotlin language support
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.koroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:${versions.koroutines}"

    // Android support libraries
    implementation "androidx.appcompat:appcompat:${versions.androidx.appcompat}"
    implementation "androidx.media:media:${versions.androidx.media}"

    // Android Room
    api "androidx.room:room-runtime:${versions.androidx.room}"
    kapt "androidx.room:room-compiler:${versions.androidx.room}"
    implementation "androidx.room:room-rxjava2:${versions.androidx.room}"

    // ExoPlayer
    api "com.google.android.exoplayer:exoplayer-core:${versions.exoplayer}"
    api "com.google.android.exoplayer:extension-mediasession:${versions.exoplayer}"

    // Dagger
    implementation "com.google.dagger:dagger:${versions.dagger}"
    implementation "com.google.dagger:dagger-android:${versions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${versions.dagger}"

    // ReactiveX
    implementation "io.reactivex.rxjava2:rxjava:${versions.rxjava}"
    implementation "io.reactivex.rxjava2:rxandroid:${versions.rxandroid}"

    // Glide
    implementation "com.github.bumptech.glide:glide:${versions.glide}"
    kapt "com.github.bumptech.glide:compiler:${versions.glide}"

    // Timber Logging
    implementation "com.jakewharton.timber:timber:${versions.timber}"

    // Other libraries
    implementation "com.github.thibseisel:kdenticon-android:${versions.kdenticon}"

    // Test dependencies
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "org.robolectric:robolectric:${versions.robolectric}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-debug:${versions.koroutines}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.koroutines}"
    testImplementation "com.google.truth:truth:${versions.truth}"
    testImplementation "androidx.test:core:${versions.androidx.test_core}"
    testImplementation "androidx.test:runner:${versions.androidx.test_runner}"
    testImplementation "androidx.test.ext:junit-ktx:${versions.androidx.ext_junit}"
    testImplementation "androidx.test.ext:truth:${versions.androidx.ext_truth}"

    // Android-specific test dependencies
    androidTestImplementation "com.google.truth:truth:${versions.truth}"
    androidTestImplementation "androidx.room:room-testing:${versions.androidx.room}"
    androidTestImplementation "org.mockito:mockito-android:${versions.mockito}"
    androidTestImplementation "androidx.test:core:${versions.androidx.test_core}"
    androidTestImplementation "androidx.test:runner:${versions.androidx.test_runner}"
}
