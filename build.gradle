/*
 * Copyright 2018 Thibault Seisel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        // SDK and tools
        compileSdkVersion = 28
        minSdkVersion = 21
        targetSdkVersion = 27

        // App Version shared across modules
        appVersionCode = 1002
        appVersionName = '1.0.2'

        kotlinVersion = '1.3.10'
        buildToolsVersion = '3.2.1'

        supportLibVersion = '28.0.0'
        koroutinesVersion = '1.1.0'
        glideVersion = '4.8.0'
        daggerVersion = '2.19'
        junitVersion = '4.12'
        mockitoVersion = '2.22.0'
        lifecycleVersion = '1.1.1'
        roomVersion = '1.1.1'
        rxjavaVersion = '2.2.3'
        rxandroidVersion = '2.1.0'
        exoplayerVersion = '2.9.1'
        constraintVersion = '1.1.3'
        recyclerVersion = '1.1.4'
        kdenticonVersion = '1.0.0-alpha5'
        timberVersion = '4.7.1'
        androidTestVersion = '1.0.2'
        espressoVersion = '3.0.2'
        robolectricVersion = '3.8'
        truthVersion = '0.42'
    }

    repositories {
        if (project.hasProperty('repositoryMirrors')) {
            repositoryMirrors.split(',').each { mirror ->
                maven { url mirror }
            }
        } else {
            google()
            jcenter()
        }
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$buildToolsVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

allprojects {
    repositories {
        if (project.hasProperty('repositoryMirrors')) {
            repositoryMirrors.split(',').each { mirror ->
                maven { url mirror }
            }
        } else {
            google()
            jcenter()
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 * Retrieve a Gradle property value, or return the provided default value if it is not defined.
 *
 * @param propertyName The name of the property to find.
 * @param defaultValue The value to use when the requested property is not defined.
 * @return The value of the Gradle property.
 */
def <T> T propOrDefault(String propertyName, T defaultValue) {
    def propertyValue = project.properties[propertyName]
    return propertyValue ?: defaultValue
}