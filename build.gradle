/*
 * Copyright 2020 Thibault Seisel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.
import com.android.build.gradle.BaseExtension

buildscript {
    apply from: 'gradle/dependencies.gradle'

    ext {
        // SDK and tools
        compileSdkVersion = 29
        minSdkVersion = 21
        targetSdkVersion = 29
    }

    repositories {
        if (project.hasProperty('repositoryMirrors')) {
            repositoryMirrors.split(',').each { mirror ->
                maven { url mirror }
            }
        } else {
            google()
            jcenter()
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:${versions.androidx.navigation}"
    }
}

allprojects {
    repositories {
        if (project.hasProperty('repositoryMirrors')) {
            repositoryMirrors.split(',').each { mirror ->
                maven { url mirror }
            }
        } else {
            google()
            jcenter()
        }
    }
}

subprojects {
    afterEvaluate {
        // Common configuration for all modules.
        def android = extensions.findByName('android') as BaseExtension
        if (android != null) {

            android.compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }

            android.kotlinOptions {
                jvmTarget = JavaVersion.VERSION_1_8
                freeCompilerArgs += [
                        '-Xopt-in=kotlin.RequiresOptIn',
                        '-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi',
                        '-Xopt-in=kotlinx.coroutines.FlowPreview'
                ]
            }

            android.testOptions {
                // Include Android resources in unit tests to be resolved by Robolectric.
                unitTests.includeAndroidResources = true
            }
        }

        // Configure Dagger code generation for all modules.
        extensions.findByName('kapt')?.arguments {
            arg('dagger.formatGeneratedSource', 'disabled')
            arg('dagger.fastInit', 'enabled')
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 * Retrieve a Gradle property value, or return the provided default value if it is not defined.
 *
 * @param propertyName The name of the property to find.
 * @param defaultValue The value to use when the requested property is not defined.
 * @return The value of the Gradle property.
 */
def <T> T propOrDefault(String propertyName, T defaultValue) {
    def propertyValue = project.properties[propertyName]
    return propertyValue ?: defaultValue
}

/**
 * Resolve the path of a file relatively to the root project.
 * This is meant to be used by sub-projects to reference a file from the root project.
 *
 * @param filename The path of the file whose path is to be resolved.
 * @return The path of the specified file.
 */
String rootProjectFile(String filename) {
    def file = project.file(filename)
    if (!file.exists()) {
        throw new FileNotFoundException("No such file: ${file.path}")
    }

    return file.path
}